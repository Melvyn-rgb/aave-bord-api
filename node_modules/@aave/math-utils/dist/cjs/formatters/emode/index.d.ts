interface EModeCategoryData {
    ltv: string;
    liquidationThreshold: string;
    liquidationBonus: string;
    collateralBitmap: string;
    label: string;
    borrowableBitmap: string;
}
interface FormattedEModeCategory extends EModeCategoryData {
    formattedLtv: string;
    formattedLiquidationThreshold: string;
    formattedLiquidationBonus: string;
}
export interface EModeData {
    id: number;
    eMode: EModeCategoryData;
}
export declare function formatEModeCategory(eModeCategory: EModeCategoryData): FormattedEModeCategory;
export declare function formatEModes(eModes: EModeData[]): {
    eMode: FormattedEModeCategory;
    id: number;
}[];
export interface ReserveEMode extends EModeData {
    collateralEnabled: boolean;
    borrowingEnabled: boolean;
}
export declare function getReservesEModes(reserveId: number, eModes: EModeData[]): ReserveEMode[];
export interface FormattedReserveEMode extends Omit<ReserveEMode, 'eMode'> {
    eMode: FormattedEModeCategory;
}
export declare function getAndFormatReserveEModes(reserveId: number, eModes: EModeData[]): FormattedReserveEMode[];
export {};
//# sourceMappingURL=index.d.ts.map
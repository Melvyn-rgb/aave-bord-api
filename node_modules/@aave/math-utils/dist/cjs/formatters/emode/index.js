"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAndFormatReserveEModes = exports.getReservesEModes = exports.formatEModes = exports.formatEModeCategory = void 0;
const bignumber_1 = require("../../bignumber");
const constants_1 = require("../../constants");
function formatEModeCategory(eModeCategory) {
    return Object.assign(Object.assign({}, eModeCategory), { formattedLtv: (0, bignumber_1.normalize)(eModeCategory.ltv, constants_1.LTV_PRECISION), formattedLiquidationThreshold: (0, bignumber_1.normalize)(eModeCategory.liquidationThreshold, constants_1.LTV_PRECISION), formattedLiquidationBonus: (0, bignumber_1.normalize)((0, bignumber_1.valueToBigNumber)(eModeCategory.liquidationBonus).minus(10 ** constants_1.LTV_PRECISION), 4) });
}
exports.formatEModeCategory = formatEModeCategory;
function formatEModes(eModes) {
    return eModes.map(eMode => (Object.assign(Object.assign({}, eMode), { eMode: formatEModeCategory(eMode.eMode) })));
}
exports.formatEModes = formatEModes;
function getReservesEModes(reserveId, eModes) {
    return eModes.reduce((acc, eMode) => {
        const { borrowableBitmap, collateralBitmap } = eMode.eMode;
        const borrowingEnabled = borrowableBitmap[borrowableBitmap.length - reserveId - 1] === '1';
        const collateralEnabled = collateralBitmap[collateralBitmap.length - reserveId - 1] === '1';
        if (borrowingEnabled || collateralEnabled) {
            acc.push({
                id: eMode.id,
                collateralEnabled,
                borrowingEnabled,
                eMode: eMode.eMode,
            });
        }
        return acc;
    }, []);
}
exports.getReservesEModes = getReservesEModes;
function getAndFormatReserveEModes(reserveId, eModes) {
    return getReservesEModes(reserveId, eModes).map(eMode => (Object.assign(Object.assign({}, eMode), { eMode: formatEModeCategory(eMode.eMode) })));
}
exports.getAndFormatReserveEModes = getAndFormatReserveEModes;
//# sourceMappingURL=index.js.map
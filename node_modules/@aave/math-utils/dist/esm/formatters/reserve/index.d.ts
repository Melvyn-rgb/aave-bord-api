import { EModeData, FormattedReserveEMode } from '../emode';
import { CalculateReserveIncentivesResponse } from '../incentive/calculate-reserve-incentives';
import { ReservesIncentiveDataHumanized } from '../incentive/types';
export interface FormatReserveResponse extends ReserveData {
    formattedBaseLTVasCollateral: string;
    formattedReserveLiquidationThreshold: string;
    formattedReserveLiquidationBonus: string;
    formattedAvailableLiquidity: string;
    totalDebt: string;
    totalVariableDebt: string;
    totalLiquidity: string;
    borrowUsageRatio: string;
    supplyUsageRatio: string;
    supplyAPY: string;
    variableBorrowAPY: string;
    unborrowedLiquidity: string;
    supplyAPR: string;
    variableBorrowAPR: string;
    isIsolated: boolean;
    isolationModeTotalDebtUSD: string;
    availableDebtCeilingUSD: string;
    debtCeilingUSD: string;
    eModes: FormattedReserveEMode[];
}
export interface FormatReserveRequest {
    reserve: ReserveData;
    currentTimestamp: number;
    eModes?: EModeData[];
}
export interface ReserveData {
    originalId: number;
    id: string;
    symbol: string;
    name: string;
    decimals: number;
    underlyingAsset: string;
    usageAsCollateralEnabled: boolean;
    reserveFactor: string;
    baseLTVasCollateral: string;
    liquidityIndex: string;
    reserveLiquidationThreshold: string;
    reserveLiquidationBonus: string;
    variableBorrowIndex: string;
    variableBorrowRate: string;
    availableLiquidity: string;
    liquidityRate: string;
    totalScaledVariableDebt: string;
    lastUpdateTimestamp: number;
    borrowCap: string;
    supplyCap: string;
    debtCeiling: string;
    debtCeilingDecimals: number;
    isolationModeTotalDebt: string;
    unbacked: string;
    virtualAccActive: boolean;
    virtualUnderlyingBalance: string;
}
/**
 * @description computes additional fields and normalizes numbers into human readable decimals
 */
export declare function formatReserve({ reserve, currentTimestamp, eModes, }: FormatReserveRequest): FormatReserveResponse;
export declare type ReserveDataWithPrice = ReserveData & {
    priceInMarketReferenceCurrency: string;
};
export interface FormatReserveUSDRequest {
    reserve: ReserveDataWithPrice;
    currentTimestamp: number;
    marketReferencePriceInUsd: string;
    marketReferenceCurrencyDecimals: number;
    eModes?: EModeData[];
}
export interface FormatReserveUSDResponse extends FormatReserveResponse {
    totalLiquidityUSD: string;
    availableLiquidityUSD: string;
    totalDebtUSD: string;
    totalVariableDebtUSD: string;
    borrowCapUSD: string;
    supplyCapUSD: string;
    unbackedUSD: string;
    priceInMarketReferenceCurrency: string;
    formattedPriceInMarketReferenceCurrency: string;
    priceInUSD: string;
}
/**
 * @description computes additional fields and normalizes numbers into human readable decimals
 * In addition to that it also converts the numbers to USD
 */
export declare function formatReserveUSD({ reserve, currentTimestamp, marketReferencePriceInUsd, marketReferenceCurrencyDecimals, eModes, }: FormatReserveUSDRequest): FormatReserveUSDResponse;
export interface FormatReservesUSDRequest<T extends ReserveDataWithPrice> {
    reserves: T[];
    eModes?: EModeData[];
    currentTimestamp: number;
    marketReferencePriceInUsd: string;
    marketReferenceCurrencyDecimals: number;
}
export declare function formatReserves<T extends ReserveDataWithPrice>({ reserves, eModes, currentTimestamp, marketReferencePriceInUsd, marketReferenceCurrencyDecimals, }: FormatReservesUSDRequest<T>): (T & FormatReserveUSDResponse)[];
export interface FormatReservesAndIncentivesUSDRequest<T extends ReserveDataWithPrice> extends FormatReservesUSDRequest<T & {
    underlyingAsset: string;
}> {
    reserveIncentives: ReservesIncentiveDataHumanized[];
}
export declare function formatReservesAndIncentives<T extends ReserveDataWithPrice>({ reserves, eModes, currentTimestamp, marketReferencePriceInUsd, marketReferenceCurrencyDecimals, reserveIncentives, }: FormatReservesAndIncentivesUSDRequest<T>): Array<FormatReserveUSDResponse & T & Partial<CalculateReserveIncentivesResponse>>;
//# sourceMappingURL=index.d.ts.map